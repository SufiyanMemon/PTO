<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_data_broker_transform">
    <sys_ux_data_broker_transform action="INSERT_OR_UPDATE">
        <acl_failure_result/>
        <api_name>x_572127_paid_ti_0.Transform - All Requests</api_name>
        <description/>
        <mutates_server_data>false</mutates_server_data>
        <name>Transform - All Requests</name>
        <output_schema/>
        <private>false</private>
        <props>[{&#13;
  "name": "evamData",&#13;
  "label": "TO EVAM Data",&#13;
  "description": "",&#13;
  "readOnly": false,&#13;
  "fieldType": "object",&#13;
  "mandatory": true,&#13;
  "defaultValue": {}&#13;
}]</props>
        <required_translations>[{"message":"TO EVAM Data","comment":""}]</required_translations>
        <schema_version>1.0.0</schema_version>
        <script><![CDATA[function transform(input) {
    input.evamData.items = input.evamData.items.map(function(item) {

        var BkgColor = 'No Output';
        var rejection = item.propValues.model.rejection_reason;
		var reason = item.propValues.model.time_off_reason;
        var status = item.propValues.model.status;
		item.propValues.subtitle = reason;
        switch (status) {
            case 'Draft':
                BkgColor = 'yellow';
                break;
            case 'Requested':
                BkgColor = 'orange';
                break;
            case 'Approved':
                BkgColor = 'green';
                break;
            case 'Rejected':
				item.propValues.subtitle = rejection;
                BkgColor = 'gray';
                break;
            case 'Cancelled':
                BkgColor = 'gray';
                break;
        }
        item.propValues.highlightedHeaderBkgColor = BkgColor;

        //start a Glide Date object
        var dt = new GlideDate();
        //set the value to the property value being passed in
        dt.setValue(item.propValues.model.start_date);
        //return the formated date
        var startDt = dt.getByFormat("MMM dd");
        dt = new GlideDate();
        //set the value to the property value being passed in
        dt.setValue(item.propValues.model.end_date);
        //return the formated date
        var endDt = dt.getByFormat("MMM dd");
        item.propValues.titleLabel = startDt + ' - ' + endDt;

        var start = new GlideDateTime(item.propValues.model.start_date);
        var end = new GlideDateTime(item.propValues.model.end_date);
        var dur = GlideDateTime.subtract(start, end);
        var days = dur.getRoundedDayPart() + 1;
		item.propValues.detailValueOne = days + ' days';
        return item;
    });
    return input.evamData;
}]]></script>
        <sys_class_name>sys_ux_data_broker_transform</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-16 06:47:08</sys_created_on>
        <sys_id>03f1e69e979911107464bbc3f153af8f</sys_id>
        <sys_name>Transform - All Requests</sys_name>
        <sys_package display_value="Paid Time Off" source="x_572127_paid_ti_0">47f1e69eed991110f2df2c9d6ecbb1fc</sys_package>
        <sys_policy/>
        <sys_scope display_value="Paid Time Off">47f1e69eed991110f2df2c9d6ecbb1fc</sys_scope>
        <sys_update_name>sys_ux_data_broker_transform_03f1e69e979911107464bbc3f153af8f</sys_update_name>
    </sys_ux_data_broker_transform>
</record_update>
